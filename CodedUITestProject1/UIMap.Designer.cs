// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinTabPage uIMonitoringDataTabPage = this.UIARSCAAnalyticalReasoWindow.UITabWindow.UIMonitoringDataTabPage;
            WinTabPage uIIDSAlertRawTabPage = this.UIARSCAAnalyticalReasoWindow.UITabDSOptionsWindow.UIIDSAlertRawTabPage;
            WinCheckBox uIDontshowitagainCheckBox = this.UITipWindow.UIDontshowitagainWindow.UIDontshowitagainCheckBox;
            WinButton uIOKButton = this.UITipWindow.UIOKWindow.UIOKButton;
            WinTabPage uIFirewallLogsRawTabPage = this.UIARSCAAnalyticalReasoWindow.UITabDSOptionsWindow.UIFirewallLogsRawTabPage;
            WinCell uITeardownCell = this.UIARSCAAnalyticalReasoWindow.UIDataGridViewFirewallWindow.UIDataGridViewTable.UIRow8Row.UITeardownCell;
            WinCell uIBuiltCell = this.UIARSCAAnalyticalReasoWindow.UIDataGridViewFirewallWindow.UIDataGridViewTable.UIRow14Row.UIBuiltCell;
            WinButton uIOKButton1 = this.UIConfirmyourActionandWindow.UIOKWindow.UIOKButton;
            WinCell uITeardownCell1 = this.UIARSCAAnalyticalReasoWindow.UIDataGridViewFirewallWindow.UIDataGridViewTable.UIRow2Row.UITeardownCell;
            WinCell uIBuiltCell1 = this.UIARSCAAnalyticalReasoWindow.UIDataGridViewFirewallWindow.UIDataGridViewTable.UIRow78Row.UIBuiltCell;
            WinCell uIBuiltCell2 = this.UIARSCAAnalyticalReasoWindow.UIDataGridViewFirewallWindow.UIDataGridViewTable.UIRow86Row.UIBuiltCell;
            WinList uIListSelectedObservatList = this.UIConfirmyourActionandWindow.UIListSelectedObservatWindow.UIListSelectedObservatList;
            WinButton uIBtnRelateObsButton = this.UIConfirmyourActionandWindow.UIBtnRelateObsWindow.UIBtnRelateObsButton;
            WinCheckBox uISameTimeCheckBox = this.UILinkrelatedobservatiWindow.UISameTimeWindow.UISameTimeCheckBox;
            WinButton uIOKButton2 = this.UILinkrelatedobservatiWindow.UIOKWindow.UIOKButton;
            WinMenuItem uIViewongoingobservatiMenuItem = this.UIARSCAAnalyticalReasoWindow.UIMenuStrip1MenuBar.UIViewongoingobservatiMenuItem;
            WinButton uICloseButton = this.UICurrentobservationWindow.UICurrentobservationTitleBar.UICloseButton;
            WinMenuItem uIWritedownnewthoughthMenuItem = this.UIARSCAAnalyticalReasoWindow.UIMenuStrip1MenuBar.UIWritedownnewthoughthMenuItem;
            WinEdit uITxtHypoEdit = this.UIWhatsyourthoughtgiveWindow.UITxtHypoWindow.UITxtHypoEdit;
            WinButton uIOKButton3 = this.UIWhatsyourthoughtgiveWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'Monitoring Data' tab
            Mouse.Click(uIMonitoringDataTabPage, new Point(23, 55));

            // Click 'IDS Alert (Raw)' tab
            Mouse.Click(uIIDSAlertRawTabPage, new Point(72, 31));

            // Select 'Don't show it again!' check box
            uIDontshowitagainCheckBox.Checked = this.RecordedMethod1Params.UIDontshowitagainCheckBoxChecked;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(30, 12));

            // Click 'Firewall Logs (Raw)' tab
            Mouse.Click(uIFirewallLogsRawTabPage, new Point(86, 30));

            // Move 'Teardown' cell to 'Built' cell
            uIBuiltCell.EnsureClickable(new Point(42, 5));
            Mouse.StartDragging(uITeardownCell, new Point(35, 16));
            Mouse.StopDragging(uIBuiltCell, new Point(42, 5));

            // Select 'Don't show it again!' check box
            uIDontshowitagainCheckBox.Checked = this.RecordedMethod1Params.UIDontshowitagainCheckBoxChecked1;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(47, 10));

            // Type '{Space}' in 'Built' cell
            Keyboard.SendKeys(uIBuiltCell, this.RecordedMethod1Params.UIBuiltCellSendKeys, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(23, 15));

            // Click 'Teardown' cell
            Mouse.Click(uITeardownCell1, new Point(10, 3));

            // Click 'Built' cell
            Mouse.Click(uIBuiltCell1, new Point(0, 13));

            // Move 'Built' cell to 'Built' cell
            uIBuiltCell2.EnsureClickable(new Point(2, 8));
            Mouse.StartDragging(uIBuiltCell1, new Point(5, 8));
            Mouse.StopDragging(uIBuiltCell2, new Point(2, 8));

            // Type '{Space}' in 'Built' cell
            Keyboard.SendKeys(uIBuiltCell2, this.RecordedMethod1Params.UIBuiltCellSendKeys1, ModifierKeys.None);

            // Select 'FIREWALL-[4/6/2012 6:01:00 PM]-[Built]-[TCP](172.23.0.108\, 10.32.5.58),FIREWALL-[4/6/2012 6:01:00 PM]-[Deny]-[TCP](172.23.0.108\, 10.32.5.58),FIREWALL-[4/6/2012 6:01:00 PM]-[Teardown]-[TCP](172.23.0.108\, 10.32.5.58),FIREWALL-[4/6/2012 6:01:00 PM]-[Deny]-[TCP](172.23.0.108\, 10.32.5.57),FIREWALL-[4/6/2012 6:01:00 PM]-[Teardown]-[TCP](172.23.0.108\, 10.32.5.57),FIREWALL-[4/6/2012 6:01:00 PM]-[Built]-[TCP](172.23.0.108\, 10.32.5.51),FIREWALL-[4/6/2012 6:01:00 PM]-[Built]-[TCP](172.23.0.108\, 10.32.5.58)' in 'listSelectedObservation' list box
            uIListSelectedObservatList.SelectedItemsAsString = this.RecordedMethod1Params.UIListSelectedObservatListSelectedItemsAsString;

            // Click 'btnRelateObs' button
            Mouse.Click(uIBtnRelateObsButton, new Point(15, 14));

            // Select 'Same Time' check box
            uISameTimeCheckBox.Checked = this.RecordedMethod1Params.UISameTimeCheckBoxChecked;

            // Click 'OK' button
            Mouse.Click(uIOKButton2, new Point(49, 15));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(21, 20));

            // Click 'View ongoing observation buffer' menu item
            Mouse.Click(uIViewongoingobservatiMenuItem, new Point(52, 14));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(27, 8));

            // Click 'Write down new thought(hypothesis)' menu item
            Mouse.Click(uIWritedownnewthoughthMenuItem, new Point(82, 22));

            // Type 'hypotehsis' in 'txtHypo' text box
            uITxtHypoEdit.Text = this.RecordedMethod1Params.UITxtHypoEditText;

            // Click 'OK' button
            Mouse.Click(uIOKButton3, new Point(43, 8));
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public UIARSCAAnalyticalReasoWindow UIARSCAAnalyticalReasoWindow
        {
            get
            {
                if ((this.mUIARSCAAnalyticalReasoWindow == null))
                {
                    this.mUIARSCAAnalyticalReasoWindow = new UIARSCAAnalyticalReasoWindow();
                }
                return this.mUIARSCAAnalyticalReasoWindow;
            }
        }
        
        public UITipWindow UITipWindow
        {
            get
            {
                if ((this.mUITipWindow == null))
                {
                    this.mUITipWindow = new UITipWindow();
                }
                return this.mUITipWindow;
            }
        }
        
        public UIConfirmyourActionandWindow UIConfirmyourActionandWindow
        {
            get
            {
                if ((this.mUIConfirmyourActionandWindow == null))
                {
                    this.mUIConfirmyourActionandWindow = new UIConfirmyourActionandWindow();
                }
                return this.mUIConfirmyourActionandWindow;
            }
        }
        
        public UILinkrelatedobservatiWindow UILinkrelatedobservatiWindow
        {
            get
            {
                if ((this.mUILinkrelatedobservatiWindow == null))
                {
                    this.mUILinkrelatedobservatiWindow = new UILinkrelatedobservatiWindow();
                }
                return this.mUILinkrelatedobservatiWindow;
            }
        }
        
        public UICurrentobservationWindow UICurrentobservationWindow
        {
            get
            {
                if ((this.mUICurrentobservationWindow == null))
                {
                    this.mUICurrentobservationWindow = new UICurrentobservationWindow();
                }
                return this.mUICurrentobservationWindow;
            }
        }
        
        public UIWhatsyourthoughtgiveWindow UIWhatsyourthoughtgiveWindow
        {
            get
            {
                if ((this.mUIWhatsyourthoughtgiveWindow == null))
                {
                    this.mUIWhatsyourthoughtgiveWindow = new UIWhatsyourthoughtgiveWindow();
                }
                return this.mUIWhatsyourthoughtgiveWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private UIARSCAAnalyticalReasoWindow mUIARSCAAnalyticalReasoWindow;
        
        private UITipWindow mUITipWindow;
        
        private UIConfirmyourActionandWindow mUIConfirmyourActionandWindow;
        
        private UILinkrelatedobservatiWindow mUILinkrelatedobservatiWindow;
        
        private UICurrentobservationWindow mUICurrentobservationWindow;
        
        private UIWhatsyourthoughtgiveWindow mUIWhatsyourthoughtgiveWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Don't show it again!' check box
        /// </summary>
        public bool UIDontshowitagainCheckBoxChecked = true;
        
        /// <summary>
        /// Select 'Don't show it again!' check box
        /// </summary>
        public bool UIDontshowitagainCheckBoxChecked1 = true;
        
        /// <summary>
        /// Type '{Space}' in 'Built' cell
        /// </summary>
        public string UIBuiltCellSendKeys = "{Space}";
        
        /// <summary>
        /// Type '{Space}' in 'Built' cell
        /// </summary>
        public string UIBuiltCellSendKeys1 = "{Space}";
        
        /// <summary>
        /// Select 'FIREWALL-[4/6/2012 6:01:00 PM]-[Built]-[TCP](172.23.0.108\, 10.32.5.58),FIREWALL-[4/6/2012 6:01:00 PM]-[Deny]-[TCP](172.23.0.108\, 10.32.5.58),FIREWALL-[4/6/2012 6:01:00 PM]-[Teardown]-[TCP](172.23.0.108\, 10.32.5.58),FIREWALL-[4/6/2012 6:01:00 PM]-[Deny]-[TCP](172.23.0.108\, 10.32.5.57),FIREWALL-[4/6/2012 6:01:00 PM]-[Teardown]-[TCP](172.23.0.108\, 10.32.5.57),FIREWALL-[4/6/2012 6:01:00 PM]-[Built]-[TCP](172.23.0.108\, 10.32.5.51),FIREWALL-[4/6/2012 6:01:00 PM]-[Built]-[TCP](172.23.0.108\, 10.32.5.58)' in 'listSelectedObservation' list box
        /// </summary>
        public string UIListSelectedObservatListSelectedItemsAsString = @"FIREWALL-[4/6/2012 6:01:00 PM]-[Built]-[TCP](172.23.0.108\, 10.32.5.58),FIREWALL-[4/6/2012 6:01:00 PM]-[Deny]-[TCP](172.23.0.108\, 10.32.5.58),FIREWALL-[4/6/2012 6:01:00 PM]-[Teardown]-[TCP](172.23.0.108\, 10.32.5.58),FIREWALL-[4/6/2012 6:01:00 PM]-[Deny]-[TCP](172.23.0.108\, 10.32.5.57),FIREWALL-[4/6/2012 6:01:00 PM]-[Teardown]-[TCP](172.23.0.108\, 10.32.5.57),FIREWALL-[4/6/2012 6:01:00 PM]-[Built]-[TCP](172.23.0.108\, 10.32.5.51),FIREWALL-[4/6/2012 6:01:00 PM]-[Built]-[TCP](172.23.0.108\, 10.32.5.58)";
        
        /// <summary>
        /// Select 'Same Time' check box
        /// </summary>
        public bool UISameTimeCheckBoxChecked = true;
        
        /// <summary>
        /// Type 'hypotehsis' in 'txtHypo' text box
        /// </summary>
        public string UITxtHypoEditText = "hypotehsis";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIARSCAAnalyticalReasoWindow : WinWindow
    {
        
        public UIARSCAAnalyticalReasoWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "ARSCA-Analytical Reasoning Support for Cyber Analysis";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("ARSCA-Analytical Reasoning Support for Cyber Analysis");
            #endregion
        }
        
        #region Properties
        public UITabWindow UITabWindow
        {
            get
            {
                if ((this.mUITabWindow == null))
                {
                    this.mUITabWindow = new UITabWindow(this);
                }
                return this.mUITabWindow;
            }
        }
        
        public UITabDSOptionsWindow UITabDSOptionsWindow
        {
            get
            {
                if ((this.mUITabDSOptionsWindow == null))
                {
                    this.mUITabDSOptionsWindow = new UITabDSOptionsWindow(this);
                }
                return this.mUITabDSOptionsWindow;
            }
        }
        
        public UIDataGridViewFirewallWindow UIDataGridViewFirewallWindow
        {
            get
            {
                if ((this.mUIDataGridViewFirewallWindow == null))
                {
                    this.mUIDataGridViewFirewallWindow = new UIDataGridViewFirewallWindow(this);
                }
                return this.mUIDataGridViewFirewallWindow;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UITabWindow mUITabWindow;
        
        private UITabDSOptionsWindow mUITabDSOptionsWindow;
        
        private UIDataGridViewFirewallWindow mUIDataGridViewFirewallWindow;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITabWindow : WinWindow
    {
        
        public UITabWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tab";
            this.WindowTitles.Add("ARSCA-Analytical Reasoning Support for Cyber Analysis");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIMonitoringDataTabPage
        {
            get
            {
                if ((this.mUIMonitoringDataTabPage == null))
                {
                    this.mUIMonitoringDataTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIMonitoringDataTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Monitoring Data";
                    this.mUIMonitoringDataTabPage.WindowTitles.Add("ARSCA-Analytical Reasoning Support for Cyber Analysis");
                    #endregion
                }
                return this.mUIMonitoringDataTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIMonitoringDataTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITabDSOptionsWindow : WinWindow
    {
        
        public UITabDSOptionsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tabDSOptions";
            this.WindowTitles.Add("ARSCA-Analytical Reasoning Support for Cyber Analysis");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIIDSAlertRawTabPage
        {
            get
            {
                if ((this.mUIIDSAlertRawTabPage == null))
                {
                    this.mUIIDSAlertRawTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIIDSAlertRawTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "IDS Alert (Raw)";
                    this.mUIIDSAlertRawTabPage.WindowTitles.Add("ARSCA-Analytical Reasoning Support for Cyber Analysis");
                    #endregion
                }
                return this.mUIIDSAlertRawTabPage;
            }
        }
        
        public WinTabPage UIFirewallLogsRawTabPage
        {
            get
            {
                if ((this.mUIFirewallLogsRawTabPage == null))
                {
                    this.mUIFirewallLogsRawTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIFirewallLogsRawTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Firewall Logs (Raw)";
                    this.mUIFirewallLogsRawTabPage.WindowTitles.Add("ARSCA-Analytical Reasoning Support for Cyber Analysis");
                    #endregion
                }
                return this.mUIFirewallLogsRawTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIIDSAlertRawTabPage;
        
        private WinTabPage mUIFirewallLogsRawTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDataGridViewFirewallWindow : WinWindow
    {
        
        public UIDataGridViewFirewallWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dataGridViewFirewall";
            this.WindowTitles.Add("ARSCA-Analytical Reasoning Support for Cyber Analysis");
            #endregion
        }
        
        #region Properties
        public UIDataGridViewTable UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new UIDataGridViewTable(this);
                }
                return this.mUIDataGridViewTable;
            }
        }
        #endregion
        
        #region Fields
        private UIDataGridViewTable mUIDataGridViewTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDataGridViewTable : WinTable
    {
        
        public UIDataGridViewTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.WindowTitles.Add("ARSCA-Analytical Reasoning Support for Cyber Analysis");
            #endregion
        }
        
        #region Properties
        public UIRow8Row UIRow8Row
        {
            get
            {
                if ((this.mUIRow8Row == null))
                {
                    this.mUIRow8Row = new UIRow8Row(this);
                }
                return this.mUIRow8Row;
            }
        }
        
        public UIRow14Row UIRow14Row
        {
            get
            {
                if ((this.mUIRow14Row == null))
                {
                    this.mUIRow14Row = new UIRow14Row(this);
                }
                return this.mUIRow14Row;
            }
        }
        
        public UIRow2Row UIRow2Row
        {
            get
            {
                if ((this.mUIRow2Row == null))
                {
                    this.mUIRow2Row = new UIRow2Row(this);
                }
                return this.mUIRow2Row;
            }
        }
        
        public UIRow78Row UIRow78Row
        {
            get
            {
                if ((this.mUIRow78Row == null))
                {
                    this.mUIRow78Row = new UIRow78Row(this);
                }
                return this.mUIRow78Row;
            }
        }
        
        public UIRow86Row UIRow86Row
        {
            get
            {
                if ((this.mUIRow86Row == null))
                {
                    this.mUIRow86Row = new UIRow86Row(this);
                }
                return this.mUIRow86Row;
            }
        }
        #endregion
        
        #region Fields
        private UIRow8Row mUIRow8Row;
        
        private UIRow14Row mUIRow14Row;
        
        private UIRow2Row mUIRow2Row;
        
        private UIRow78Row mUIRow78Row;
        
        private UIRow86Row mUIRow86Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIRow8Row : WinRow
    {
        
        public UIRow8Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "4/6/2012 6:00:00 PM;Info;Teardown;TCP;172.23.0.108;10.32.5.58;49922;6667;6667_tcp" +
                ";outbound;ASA-6-302014";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("ARSCA-Analytical Reasoning Support for Cyber Analysis");
            #endregion
        }
        
        #region Properties
        public WinCell UITeardownCell
        {
            get
            {
                if ((this.mUITeardownCell == null))
                {
                    this.mUITeardownCell = new WinCell(this);
                    #region Search Criteria
                    this.mUITeardownCell.SearchProperties[WinCell.PropertyNames.Value] = "Teardown";
                    this.mUITeardownCell.WindowTitles.Add("ARSCA-Analytical Reasoning Support for Cyber Analysis");
                    #endregion
                }
                return this.mUITeardownCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUITeardownCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIRow14Row : WinRow
    {
        
        public UIRow14Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 14";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("ARSCA-Analytical Reasoning Support for Cyber Analysis");
            #endregion
        }
        
        #region Properties
        public WinCell UIBuiltCell
        {
            get
            {
                if ((this.mUIBuiltCell == null))
                {
                    this.mUIBuiltCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIBuiltCell.SearchProperties[WinCell.PropertyNames.Value] = "Built";
                    this.mUIBuiltCell.WindowTitles.Add("ARSCA-Analytical Reasoning Support for Cyber Analysis");
                    #endregion
                }
                return this.mUIBuiltCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIBuiltCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIRow2Row : WinRow
    {
        
        public UIRow2Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "4/6/2012 6:00:00 PM;Info;Teardown;TCP;172.23.0.108;10.32.5.58;49921;6667;6667_tcp" +
                ";outbound;ASA-6-302014";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("ARSCA-Analytical Reasoning Support for Cyber Analysis");
            #endregion
        }
        
        #region Properties
        public WinCell UITeardownCell
        {
            get
            {
                if ((this.mUITeardownCell == null))
                {
                    this.mUITeardownCell = new WinCell(this);
                    #region Search Criteria
                    this.mUITeardownCell.SearchProperties[WinCell.PropertyNames.Value] = "Teardown";
                    this.mUITeardownCell.WindowTitles.Add("ARSCA-Analytical Reasoning Support for Cyber Analysis");
                    #endregion
                }
                return this.mUITeardownCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUITeardownCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIRow78Row : WinRow
    {
        
        public UIRow78Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "4/6/2012 6:01:00 PM;Info;Built;TCP;172.23.0.108;10.32.5.58;49942;6667;6667_tcp;ou" +
                "tbound;ASA-6-302013";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("ARSCA-Analytical Reasoning Support for Cyber Analysis");
            #endregion
        }
        
        #region Properties
        public WinCell UIBuiltCell
        {
            get
            {
                if ((this.mUIBuiltCell == null))
                {
                    this.mUIBuiltCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIBuiltCell.SearchProperties[WinCell.PropertyNames.Value] = "Built";
                    this.mUIBuiltCell.WindowTitles.Add("ARSCA-Analytical Reasoning Support for Cyber Analysis");
                    #endregion
                }
                return this.mUIBuiltCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIBuiltCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIRow86Row : WinRow
    {
        
        public UIRow86Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "4/6/2012 6:01:00 PM;Info;Built;TCP;172.23.0.108;10.32.5.52;49946;6667;6667_tcp;ou" +
                "tbound;ASA-6-302013";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("ARSCA-Analytical Reasoning Support for Cyber Analysis");
            #endregion
        }
        
        #region Properties
        public WinCell UIBuiltCell
        {
            get
            {
                if ((this.mUIBuiltCell == null))
                {
                    this.mUIBuiltCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIBuiltCell.SearchProperties[WinCell.PropertyNames.Value] = "Built";
                    this.mUIBuiltCell.WindowTitles.Add("ARSCA-Analytical Reasoning Support for Cyber Analysis");
                    #endregion
                }
                return this.mUIBuiltCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIBuiltCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("ARSCA-Analytical Reasoning Support for Cyber Analysis");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIViewongoingobservatiMenuItem
        {
            get
            {
                if ((this.mUIViewongoingobservatiMenuItem == null))
                {
                    this.mUIViewongoingobservatiMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIViewongoingobservatiMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "View ongoing observation buffer";
                    this.mUIViewongoingobservatiMenuItem.WindowTitles.Add("ARSCA-Analytical Reasoning Support for Cyber Analysis");
                    #endregion
                }
                return this.mUIViewongoingobservatiMenuItem;
            }
        }
        
        public WinMenuItem UIWritedownnewthoughthMenuItem
        {
            get
            {
                if ((this.mUIWritedownnewthoughthMenuItem == null))
                {
                    this.mUIWritedownnewthoughthMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIWritedownnewthoughthMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Write down new thought(hypothesis)";
                    this.mUIWritedownnewthoughthMenuItem.WindowTitles.Add("ARSCA-Analytical Reasoning Support for Cyber Analysis");
                    #endregion
                }
                return this.mUIWritedownnewthoughthMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIViewongoingobservatiMenuItem;
        
        private WinMenuItem mUIWritedownnewthoughthMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITipWindow : WinWindow
    {
        
        public UITipWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Tip";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Tip");
            #endregion
        }
        
        #region Properties
        public UIDontshowitagainWindow UIDontshowitagainWindow
        {
            get
            {
                if ((this.mUIDontshowitagainWindow == null))
                {
                    this.mUIDontshowitagainWindow = new UIDontshowitagainWindow(this);
                }
                return this.mUIDontshowitagainWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDontshowitagainWindow mUIDontshowitagainWindow;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDontshowitagainWindow : WinWindow
    {
        
        public UIDontshowitagainWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkBox1";
            this.WindowTitles.Add("Tip");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIDontshowitagainCheckBox
        {
            get
            {
                if ((this.mUIDontshowitagainCheckBox == null))
                {
                    this.mUIDontshowitagainCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIDontshowitagainCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Don\'t show it again!";
                    this.mUIDontshowitagainCheckBox.WindowTitles.Add("Tip");
                    #endregion
                }
                return this.mUIDontshowitagainCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIDontshowitagainCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button1";
            this.WindowTitles.Add("Tip");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Tip");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIConfirmyourActionandWindow : WinWindow
    {
        
        public UIConfirmyourActionandWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm your Action and Observation";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Confirm your Action and Observation");
            #endregion
        }
        
        #region Properties
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIListSelectedObservatWindow UIListSelectedObservatWindow
        {
            get
            {
                if ((this.mUIListSelectedObservatWindow == null))
                {
                    this.mUIListSelectedObservatWindow = new UIListSelectedObservatWindow(this);
                }
                return this.mUIListSelectedObservatWindow;
            }
        }
        
        public UIBtnRelateObsWindow UIBtnRelateObsWindow
        {
            get
            {
                if ((this.mUIBtnRelateObsWindow == null))
                {
                    this.mUIBtnRelateObsWindow = new UIBtnRelateObsWindow(this);
                }
                return this.mUIBtnRelateObsWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow1 mUIOKWindow;
        
        private UIListSelectedObservatWindow mUIListSelectedObservatWindow;
        
        private UIBtnRelateObsWindow mUIBtnRelateObsWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnDone";
            this.WindowTitles.Add("Confirm your Action and Observation");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Confirm your Action and Observation");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIListSelectedObservatWindow : WinWindow
    {
        
        public UIListSelectedObservatWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "listSelectedObservation";
            this.WindowTitles.Add("Confirm your Action and Observation");
            #endregion
        }
        
        #region Properties
        public WinList UIListSelectedObservatList
        {
            get
            {
                if ((this.mUIListSelectedObservatList == null))
                {
                    this.mUIListSelectedObservatList = new WinList(this);
                    #region Search Criteria
                    this.mUIListSelectedObservatList.SearchProperties[WinList.PropertyNames.Name] = "Confirm what you observed...";
                    this.mUIListSelectedObservatList.WindowTitles.Add("Confirm your Action and Observation");
                    #endregion
                }
                return this.mUIListSelectedObservatList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIListSelectedObservatList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIBtnRelateObsWindow : WinWindow
    {
        
        public UIBtnRelateObsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnRelateObs";
            this.WindowTitles.Add("Confirm your Action and Observation");
            #endregion
        }
        
        #region Properties
        public WinButton UIBtnRelateObsButton
        {
            get
            {
                if ((this.mUIBtnRelateObsButton == null))
                {
                    this.mUIBtnRelateObsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBtnRelateObsButton.WindowTitles.Add("Confirm your Action and Observation");
                    #endregion
                }
                return this.mUIBtnRelateObsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIBtnRelateObsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UILinkrelatedobservatiWindow : WinWindow
    {
        
        public UILinkrelatedobservatiWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Link related observations";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Link related observations");
            #endregion
        }
        
        #region Properties
        public UISameTimeWindow UISameTimeWindow
        {
            get
            {
                if ((this.mUISameTimeWindow == null))
                {
                    this.mUISameTimeWindow = new UISameTimeWindow(this);
                }
                return this.mUISameTimeWindow;
            }
        }
        
        public UIOKWindow2 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow2(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UISameTimeWindow mUISameTimeWindow;
        
        private UIOKWindow2 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISameTimeWindow : WinWindow
    {
        
        public UISameTimeWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ckbTime";
            this.WindowTitles.Add("Link related observations");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UISameTimeCheckBox
        {
            get
            {
                if ((this.mUISameTimeCheckBox == null))
                {
                    this.mUISameTimeCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUISameTimeCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Same Time";
                    this.mUISameTimeCheckBox.WindowTitles.Add("Link related observations");
                    #endregion
                }
                return this.mUISameTimeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUISameTimeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOKWindow2 : WinWindow
    {
        
        public UIOKWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("Link related observations");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Link related observations");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICurrentobservationWindow : WinWindow
    {
        
        public UICurrentobservationWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Current observation";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Current observation");
            #endregion
        }
        
        #region Properties
        public UICurrentobservationTitleBar UICurrentobservationTitleBar
        {
            get
            {
                if ((this.mUICurrentobservationTitleBar == null))
                {
                    this.mUICurrentobservationTitleBar = new UICurrentobservationTitleBar(this);
                }
                return this.mUICurrentobservationTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UICurrentobservationTitleBar mUICurrentobservationTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICurrentobservationTitleBar : WinTitleBar
    {
        
        public UICurrentobservationTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Current observation");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Current observation");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIWhatsyourthoughtgiveWindow : WinWindow
    {
        
        public UIWhatsyourthoughtgiveWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "What\'s your thought given the current observation?";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("What\'s your thought given the current observation?");
            #endregion
        }
        
        #region Properties
        public UITxtHypoWindow UITxtHypoWindow
        {
            get
            {
                if ((this.mUITxtHypoWindow == null))
                {
                    this.mUITxtHypoWindow = new UITxtHypoWindow(this);
                }
                return this.mUITxtHypoWindow;
            }
        }
        
        public UIOKWindow3 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow3(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITxtHypoWindow mUITxtHypoWindow;
        
        private UIOKWindow3 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITxtHypoWindow : WinWindow
    {
        
        public UITxtHypoWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtHypo";
            this.WindowTitles.Add("What\'s your thought given the current observation?");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtHypoEdit
        {
            get
            {
                if ((this.mUITxtHypoEdit == null))
                {
                    this.mUITxtHypoEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtHypoEdit.SearchProperties[WinEdit.PropertyNames.Name] = "What\'s your thought on the current observation?";
                    this.mUITxtHypoEdit.WindowTitles.Add("What\'s your thought given the current observation?");
                    #endregion
                }
                return this.mUITxtHypoEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtHypoEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOKWindow3 : WinWindow
    {
        
        public UIOKWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("What\'s your thought given the current observation?");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("What\'s your thought given the current observation?");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
